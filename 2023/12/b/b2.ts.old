const fs = require('fs');

const f: string = fs.readFileSync('./test.txt').toString();
const lines = f.split(/\r?\n/);

const startTime = performance.now();
let sum = 0;
let i = 0;
for (const line of lines) {
  if (i % 1 === 0) console.log(i.toString() + '/1000');
  i++;
  sum += processLine(line);
}
const endTime = performance.now();
console.log(sum);
console.log(`took ${Math.floor(endTime - startTime)}ms`);

let cache: Map<string, number> = new Map();
function processLine(line: string) {
  const parts = line.split(' ');
  // unfold
  const unfoldedRecordString = new Array(5).fill(parts[0]).join('?');
  const unfoldedNumbersString = new Array(5).fill(parts[1]).join(',');
  const record = parts[0].split('');
  const numbers = parts[1].split(',').map((v) => Number(v));
  const totalSpringCount = numbers.reduce((total: number, n: number) => total + n, 0);
  return countPossible(record, 0, -1, numbers);
}

function countPossible(
  record: string[],
  runLength: number,
  runI: number,
  numbers: number[]
): number {
  if (record.length === 0) {
    // done processing all
    if (runLength !== 0) {
      // ended on spring
      if (runLength !== numbers[runI]) return 0;
    }
    if (runI < numbers.length - 1) return 0; // if havent filled all numbers

    return 1;
  }

  const charToProcess = record[0];
  const newRecord = record.slice(1);

  const processBlank = () => {
    if (runLength !== 0) {
      // falling edge
      if (runLength !== numbers[runI]) return 0;
    }
    return countPossible(newRecord, 0, runI, numbers);
  };

  const processSpring = () => {
    let newRunI = runI;
    if (runLength === 0) {
      // rising edge
      newRunI++;
      if (newRunI === numbers.length) return 0;
    }
    let newRunLength = runLength;
    newRunLength++;
    if (newRunLength > numbers[runI]) return 0;
    return countPossible(newRecord, newRunLength, newRunI, numbers);
  };

  if (charToProcess === '.') {
    return processBlank();
  }

  if (charToProcess === '#') {
    return processSpring();
  }

  return processBlank() + processSpring();
}

function isValid(record: string[], numbers: number[]) {
  let prevItem = '.';
  let runLength = 0;
  let runI = 0;
  const nRuns = numbers.length;
  for (const item of record) {
    if (item === '.') {
      if (prevItem === '.') continue;
      // falling edge
      prevItem = '.';
      if (numbers[runI] === runLength) {
        if (runI === nRuns - 1) return true;
        runLength = 0;
        runI++;
        continue;
      }
      return false;
    }

    if (item === '#') {
      if (prevItem === '#') {
        runLength++;
        continue;
      }
      // rising edge
      prevItem = '#';
      runLength++;
    }
  }

  if (numbers[runI] === runLength && runI === nRuns - 1) return true;
  return false;
}

function possiblyValid(record: string[], numbers: number[]): boolean | 'possible' {
  let prevItem = '.';
  let runLength = 0;
  let runI = 0;
  const nRuns = numbers.length;
  for (const item of record) {
    if (runLength > numbers[runI]) return false;
    if (item === '?') {
      return 'possible';
    }
    if (item === '.') {
      if (prevItem === '.') continue;
      // falling edge
      prevItem = '.';
      if (numbers[runI] === runLength) {
        if (runI === nRuns - 1) return true;
        runLength = 0;
        runI++;
        continue;
      }
      return false;
    }

    if (item === '#') {
      if (prevItem === '#') {
        runLength++;
        continue;
      }
      // rising edge
      prevItem = '#';
      runLength++;
    }
  }

  if (numbers[runI] === runLength && runI === nRuns - 1) return true;
  return false;
}
